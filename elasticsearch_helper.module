<?php

/**
 * @file
 * This module provides tools to integrate elasticsearch with Drupal.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Query\QueryInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Elastic\Transport\Exception\NoNodeAvailableException;

/**
 * Implements hook_help().
 */
function elasticsearch_helper_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the elasticsearch_helper module.
    case 'help.page.elasticsearch_helper':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Elasticsearch Helper is a helper module to work
      with Elasticsearch on Drupal project.') . '</p>';
      $output .= '<p>' . t('Whereas modules like elasticsearch_connector and
      other search_api plugins try to abstract away the actual API of Elasticsearch,
      this module tries to embrace it instead. It provides some common tools on
      which to build your own integration.') . '</p>';
      $output .= '<p>' . t('The module defines an "ElasticsearchIndex" plugin
      type and a base implementation for you to extend. Unless you define your
      own plugin, this module will not do anything. Take a look at the included
      elasticsearch_helper_example module for example plugins.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_insert().
 */
function elasticsearch_helper_entity_insert(EntityInterface $entity) {
  $config = \Drupal::config('elasticsearch_helper.settings');

  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
  $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

  if ($config->get('defer_indexing')) {
    $index_plugin_manager->addToQueue($entity->getEntityTypeId(), $entity->id());
  }
  else {
    $index_plugin_manager->indexEntity($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function elasticsearch_helper_entity_update(EntityInterface $entity) {
  elasticsearch_helper_entity_insert($entity);
}

/**
 * Implements hook_entity_translation_delete().
 */
function elasticsearch_helper_entity_translation_delete(EntityInterface $entity) {
  /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
  $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');
  $index_plugin_manager->deleteEntity($entity);
}

/**
 * Implements hook_entity_delete().
 */
function elasticsearch_helper_entity_delete(EntityInterface $entity) {
  elasticsearch_helper_entity_translation_delete($entity);
}

/**
 * Implements hook_modules_installed().
 */
function elasticsearch_helper_modules_installed($modules) {
  try {
    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
    $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

    foreach ($index_plugin_manager->getDefinitions() as $plugin) {
      // If the plugin provider was just installed.
      if (isset($plugin['provider']) && in_array($plugin['provider'], $modules)) {
        // Setup indices for that plugin.
        $index_plugin_manager->createInstance($plugin['id'])->setup();
      }
    }
  }
  catch (NoNodeAvailableException $e) {
    $t_args = ['@modules' => implode(', ', $modules)];
    \Drupal::messenger()->addError(t('Elasticsearch indices provided by modules "@modules" could not be created (no alive nodes).', $t_args));
  }
  catch (\Exception $e) {
    $t_args = ['@modules' => implode(', ', $modules)];
    \Drupal::messenger()->addError(t('Elasticsearch indices provided by modules "@modules" could not be created.', $t_args));
  }
}

/**
 * Implements hook_module_preuninstall().
 */
function elasticsearch_helper_module_preuninstall($module) {
  try {
    /** @var \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager $index_plugin_manager */
    $index_plugin_manager = \Drupal::service('plugin.manager.elasticsearch_index.processor');

    foreach ($index_plugin_manager->getDefinitions() as $plugin) {
      // If the plugin provider is about to be uninstalled.
      if (isset($plugin['provider']) && $plugin['provider'] == $module) {
        // Drop indices for that plugin.
        $index_plugin_manager->createInstance($plugin['id'])->drop();
      }
    }
  }
  catch (NoNodeAvailableException $e) {
    $t_args = ['@module' => $module];
    \Drupal::messenger()->addError(t('Elasticsearch indices provided by module @module could not be dropped (no alive nodes).', $t_args));
  }
  catch (\Exception $e) {
    $t_args = ['@module' => $module];
    \Drupal::messenger()->addError(t('Elasticsearch indices provided by module @module could not be dropped.', $t_args));
  }
}

/**
 * Implements hook_elasticsearch_helper_reindex_entity_query_alter().
 */
function elasticsearch_helper_elasticsearch_helper_reindex_entity_query_alter(QueryInterface $query, $entity_type, $bundle = NULL) {
  // Do not restrict entity query based on user's permissions or node grants.
  // Generally all entities are considered to be re-indexed when
  // "drush elasticsearch-helper-reindex" command is run or
  // \Drupal\elasticsearch_helper\Plugin\ElasticsearchIndexManager::reindexEntities()
  // is executed.
  $query->accessCheck(FALSE);
}
