<?php

/**
 * @file
 * Installation functions for the Elasticsearch Helper module.
 */

use Elasticsearch\Common\Exceptions\NoNodesAvailableException;
use Drupal\user\Entity\Role;

/**
 * Implements hook_requirements.
 */
function elasticsearch_helper_requirements($phase) {
  $requirements = [];

  if ($phase == 'install') {
    // Check that the Elasticsearch PHP library is available.
    if (!class_exists('\Elasticsearch\Client')) {
      $requirements['elasticsearch_library'] = [
        'description' => t('Elasticsearch Helper requires Elasticsearch PHP library to be installed. See README.md for further details.'),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }

  if ($phase == 'runtime') {
    // Check that the Elasticsearch PHP library is available.
    if (!class_exists('\Elasticsearch\Client')) {
      $requirements['elasticsearch_library'] = [
        'title' => t('Elasticsearch PHP library missing'),
        'description' => t("Elasticsearch Helper requires the Elasticsearch PHP library. See README.md for further details."),
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    else {
      // Check Elasticsearch status.
      /** @var \Elasticsearch\Client $client */
      $client = \Drupal::service('elasticsearch_helper.elasticsearch_client');

      try {
        $health = $client->cluster()->health();

        $color_states = [
          'green' => REQUIREMENT_OK,
          'yellow' => REQUIREMENT_WARNING,
          'red' => REQUIREMENT_ERROR,
        ];

        $requirements['elasticsearch_health'] = [
          'title' => t('Elasticsearch status'),
          'description' => t('Elasticsearch cluster status is @status.', ['@status' => $health['status']]),
          'severity' => $color_states[$health['status']],
        ];
      }
      catch (NoNodesAvailableException $e) {
        $requirements['elasticsearch_health'] = [
          'title' => t('Elasticsearch status'),
          'description' => t('Could not connect to Elasticsearch'),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function elasticsearch_helper_install() {
  // Assign a low weight to ensure our implementation of
  // hook_module_implements_alter() is run among the last ones.
  module_set_weight('elasticsearch_helper', 10);
}

/**
 * Set a low module weight to ensure elasticsearch_helper runs last.
 */
function elasticsearch_helper_update_8001() {
  // Doing this in an update hook for installations that didn't have the weight
  // set on installation.
  module_set_weight('elasticsearch_helper', 10);
}

/**
 * Explicitly set the default scheme to HTTP if it wasn't set before.
 */
function elasticsearch_helper_update_8002() {
  $config = \Drupal::service('config.factory')->getEditable('elasticsearch_helper.settings');

  if ($config->get('elasticsearch_helper.scheme')) {
    $config->set('elasticsearch_helper.scheme', 'http');
  }
}

/**
 * Change module's configuration structure to allow defining multiple hosts.
 */
function elasticsearch_helper_update_8003() {
  // Update module configuration.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('elasticsearch_helper.settings');

  $hosts = [
    [
      'scheme' => $config->get('elasticsearch_helper.scheme'),
      'host' => $config->get('elasticsearch_helper.host'),
      'port' => $config->get('elasticsearch_helper.port'),
      'authentication' => [
        'enabled' => (bool) $config->get('elasticsearch_helper.authentication'),
        'user' => $config->get('elasticsearch_helper.user'),
        'password' => $config->get('elasticsearch_helper.password'),
      ],
    ]
  ];
  $defer_indexing = $config->get('elasticsearch_helper.defer_indexing');

  // Delete the configuration object altogether.
  $config->delete();

  // Reinstate the configuration.
  $config->set('hosts', $hosts);
  $config->set('defer_indexing', (bool) $defer_indexing);
  $config->save();

  // Update permission name.
  $mistyped_permission = 'configured elasticsearch helper';
  $permission = 'configure elasticsearch helper';

  /** @var \Drupal\user\RoleInterface $role */
  foreach (Role::loadMultiple() as $role) {
    if ($role->hasPermission($mistyped_permission)) {
      $role->revokePermission($mistyped_permission);
      $role->grantPermission($permission);

      $role->trustData()->save();
    }
  }
}

/**
 * Change configuration to enable configurable authentication, SSL settings.
 */
function elasticsearch_helper_update_8004() {
  // Get module configuration.
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('elasticsearch_helper.settings');

  // Get hosts.
  $hosts = $config->get('hosts') ?: [];

  // Prepare hosts.
  $updated_hosts = [];

  foreach ($hosts as $host) {
    if (!empty($host['host'])) {
      $updated_hosts[] = [
        'host' => $host['host'],
        'port' => $host['port'] ?? '',
      ];
    }
  }

  // Set hosts.
  $config->set('hosts', $updated_hosts);

  // Set scheme.
  $existing_scheme = $hosts[0]['scheme'] ?? 'http';
  $config->set('scheme', $existing_scheme);

  // Set SSL configuration.
  $config->set('ssl', [
    'certificate' => '',
    // Skip verification by default if scheme is https.
    'skip_verification' => ($existing_scheme == 'https'),
  ]);

  // Prepare authentication.
  $existing_auth = $hosts[0]['authentication'] ?? [];

  if (!empty($existing_auth['enabled']) && !empty($existing_auth['user'])) {
    $authentication['method'] = 'basic_auth';
    $authentication['configuration']['basic_auth']['user'] = $existing_auth['user'];

    if (isset($hosts[0]['authentication']['password'])) {
      $authentication['configuration']['basic_auth']['password'] = $existing_auth['password'];
    }
  }
  else {
    $authentication['method'] = '';
    $authentication['configuration'] = [];
  }

  // Set authentication.
  $config->set('authentication', $authentication);

  // Save the configuration.
  $config->save();
}
